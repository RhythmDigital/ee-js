package com.wehaverhythm.utils{		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;
		/**	 *	Simple class for simple trigonometry.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Adam Palmer	 *	@since  06.05.2008	 */		public class Trig	{					public function Trig():void		{							}		/**		* Get an angle from two points (degrees or radians)		* 		* @param $point1 The first Point.		* @param $point2 The second Point.		* @param $returnDegrees Return in degrees?		* 		* @return The angle in either degrees or radians.		*/		public static function getAngle($point1:Point, $point2:Point, $returnDegrees:Boolean=true):Number 		{			var myRadians:Number = Math.atan2(($point1.y-$point2.y), ($point1.x-$point2.x));						if ($returnDegrees)			{				var myDegrees:Number = myRadians*180/Math.PI;				return myDegrees;			} 			else {				return myRadians;			}				}		/**		* Get the distance between two points.		* 		* @param $point1 The first point.		* @param $point2 The second point.		* 		* @return The distance.		*/		public static function getDistance($point1:Point, $point2:Point):Number 		{			var x_cord:Number = $point2.x-$point1.x;			var y_cord:Number = $point2.y-$point1.y;			return Math.sqrt(x_cord*x_cord + y_cord*y_cord);					}				/**		* Get a point along a hypotenuse.		* 		* @param $point1 The xy position.		* @param $angle The angle to get a point on.		* @param $hypoLength The distance along the hypotenuse.		* 		* @return The resulting point.		*/		public static function getPointOnHypoteneuse($point1:Point, $angle:Number, $hypoLength:Number):Point 		{			// find length of other 2 sides			var a:Number = Math.sin($angle)*$hypoLength;			var b:Number = Math.sqrt(($hypoLength*$hypoLength) - (a*a));						// work out point			var point:Point = new Point();						if ($angle > 1.5 || $angle < -1.5) 			{				point.x = $point1.x + b;				point.y = $point1.y - a;			}			else {				point.x = $point1.x - b;				point.y = $point1.y - a;			}					return point;		}				/**		* Get points around a circle		* 		* @param $radius The radius of the circle.		* @param $centre The position of the circle.		* @param $numPoints The number of evenly spaced points to return.		* 		* @return An array of points arounc the circle.		*/		public static function pointsOnACircle($radius:Number, $centre:Point, $numPoints:int):Array		{			var pointsArray:Array = new Array();			var angle:Number = getRadians(360/$numPoints);						for (var i:int=0; i < $numPoints; i++)			{				pointsArray[i] = pointOnACircle($radius, $centre, angle*i);			}						return pointsArray;		}				/**		* Get a single point on a circle.		* 		* @param $radius The radius of the circle		* @param $centre The position of the circle.		* @param $theta Theta.		* 		* @return The point on the circle.		*/		public static function pointOnACircle($radius:Number, $centre:Point, $theta:Number):Point		{			var circumference:Number = ($radius*2) * Math.PI;			var Newx:Number = $radius * Math.cos($theta) + $centre.x;			var Newy:Number = $radius * Math.sin($theta) + $centre.y;			return new Point(Newx, Newy);		}				/**		 * Get a single point on a quadratic curve.		 * 		 * @param curveStart The curve's start point. 		 * @param ctrl The curve's control point.		 * @param curveStart The curve's end point. 		 * @param t The position on the curve, between 0 and 1.		 * 		 * @return The point on the curve.		 */		public static function pointOnACurve(curveStart:Point, ctrl:Point, curveEnd:Point, t:Number):Point		{			var x:Number = curveStart.x*Math.pow((1-t), 2) + ctrl.x*2*(1-t)*t + curveEnd.x*Math.pow(t, 2);			var y:Number = curveStart.y*Math.pow((1-t), 2) + ctrl.y*2*(1-t)*t + curveEnd.y*Math.pow(t, 2);						return new Point(x, y);		}				/**		* Convert radians to degrees		* 		* @param $radians Radians input.		* @return Degrees output.		*/				public static function getDegrees($radians:Number):Number		{			return $radians*180/Math.PI;		}				/**		* Convert degrees to radians		* 		* @param $degrees Degrees input.		* @return Radians output.		*/		public static function getRadians($degrees:Number):Number		{			return $degrees/180*Math.PI;		}				/**		 * Get position of one object translated to another object		 * 		 * @param containerFrom:DisplayObject First Object.		 * @param containerTo:DisplayObject Second Object		 * @param origin:Point=null For converting mouse coordinates		 * @returns Point		 */		public static function localToLocal(containerFrom:DisplayObject, containerTo:DisplayObject, origin:Point=null):Point		{			var point:Point = origin ? origin : new Point();			point = containerFrom.localToGlobal(point);			point = containerTo.globalToLocal(point);			return point;		}		/*		public static function radiansToB2Vector( r:Number,  m:Number = 1):b2Vec2		{					var vect:b2Vec2 = new b2Vec2(Math.cos(r),Math.sin(r))//*m			vect.Multiply(m);			return vect;		}				public static function b2VectorToRadians(v:b2Vec2) : Number		{			return Math.atan2(v.y,v.x);		}		*/				public static function differenceBetweenAnglesAsDegrees(firstAngle:Number, secondAngle:Number):Number		{			var difference:Number = secondAngle - firstAngle;			while (difference < -180) difference += 360;			while (difference > 180) difference -= 360;			return difference;		}								}}